schema {
  query: Query
  mutation: Mutation
}

type ContentTypeType {
  id: ID!
  appLabel: String!
  model: String!
}

input CreateUploadInput {
  kind: Int!
  name: String!
  mimetype: String!
  clientMutationId: String
}

type CreateUploadPayload {
  upload: UploadType
  clientMutationId: String
}

scalar DateTime

type DjangoDebug {
  sql: [DjangoDebugSQL]
}

type DjangoDebugSQL {
  vendor: String!
  alias: String!
  sql: String
  duration: Float!
  rawSql: String!
  params: String!
  startTime: Float!
  stopTime: Float!
  isSlow: Boolean!
  isSelect: Boolean!
  transId: String
  transStatus: String
  isoLevel: String
  encoding: String
}

input FinishUploadInput {
  id: ID!
  clientMutationId: String
}

type FinishUploadPayload {
  upload: UploadType
  clientMutationId: String
}

scalar GenericScalar

type Mutation {
  createUpload(input: CreateUploadInput!): CreateUploadPayload
  finishUpload(input: FinishUploadInput!): FinishUploadPayload
  login(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  node(id: ID!): Node
}

interface Node {
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

type Query {
  node(id: ID!): Node
  contentTypes: [ContentTypeType]
  _debug: DjangoDebug
  me: UserType
  upload(id: ID!): UploadType
  uploads: [UploadType]
}

scalar UUID

type UploadType implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  errorMessage: String
  filename: String!
  kind: Int!
  mimetype: String!
  status: Int!
  user: UserType!
  presignedUrlGet: String
  presignedUrlPut: String
}

type UserType {
  id: UUID!
  firstName: String!
  lastName: String!
}
